/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useTexture, useVideoTexture } from "@react-three/drei";
import * as THREE from "three";
import { motion } from "framer-motion-3d";
import { animate, useMotionValue } from "framer-motion";
import { useFrame } from "@react-three/fiber";

export default function Room(props) {
  const { section } = props;
  const { nodes, materials } = useGLTF("models/room.gltf");
  const texture = useTexture("textures/baked.jpg");
  const textureVSCode = useVideoTexture("textures/screen.mp4");
  texture.flipY = false;
  texture.colorSpace = THREE.SRGBColorSpace;

  const textureMaterial = new THREE.MeshStandardMaterial({
    map: texture,
    opacity: 1,
  });
  const screentextureMaterial = new THREE.MeshStandardMaterial({
    map: textureVSCode,
    toneMapped: false,
    opacity: 1,
  });

  const textureOpacity = useMotionValue(0);

  useEffect(() => {
    animate(textureOpacity, section === 0 ? 1 : 0);
  }, [section]);

  useFrame(() => {
    textureMaterial.opacity = textureOpacity.get();
  });
  return (
    <group dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Mousepad_Baked.geometry}
        material={textureMaterial}
        position={[0.541, -0.54, -0.855]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.medpic_Baked.geometry}
        material={textureMaterial}
        position={[0.835, 0.23, -1.496]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Lamp_Baked.geometry}
        material={textureMaterial}
        position={[0.318, -1.069, -1.298]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Pluck_Baked.geometry}
        material={textureMaterial}
        position={[0.134, -1.083, -1.297]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wall_Baked.geometry}
        material={textureMaterial}
        position={[-0.882, 1.26, -0.832]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Chair_Baked.geometry}
        material={textureMaterial}
        position={[0.289, -0.897, 0.107]}
        rotation={[0, 1.216, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Treee_Baked.geometry}
        material={textureMaterial}
        position={[-0.998, 1.21, -0.848]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Floor_Baked.geometry}
        material={textureMaterial}
        position={[0.492, -1.198, 0.687]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.mug_Baked.geometry}
        material={textureMaterial}
        position={[-0.098, -0.464, -0.611]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Mouse_Baked.geometry}
        material={textureMaterial}
        position={[0.917, -0.506, -0.634]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.bigpic_Baked.geometry}
        material={textureMaterial}
        position={[-1.621, -0.945, 1.164]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.smallpic_Baked.geometry}
        material={textureMaterial}
        position={[-0.281, 0.583, -1.479]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Table_Baked.geometry}
        material={textureMaterial}
        position={[1.161, -0.845, -0.901]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.container_Baked.geometry}
        material={textureMaterial}
        position={[-0.497, 0.02, -0.854]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.pencil_Baked.geometry}
        material={textureMaterial}
        position={[-0.213, -0.347, -0.742]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Laptop_Baked.geometry}
        material={textureMaterial}
        position={[0.359, -0.5, -0.784]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Screen.geometry}
        material={screentextureMaterial}
        position={[0.421, -0.278, -1.074]}
        scale={0.942}
      />
    </group>
  );
}

useGLTF.preload("models/room.gltf");
